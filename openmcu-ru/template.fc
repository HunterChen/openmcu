Сравнение файлов template.cxx и TEMPLATE48.CXX
***** template.cxx
        << (s->second->autoDial?"1":"0") << ", "
        << s->second->muteMask << "/" << (s->second->kManualGainDB+20) << "/" << (s->second->kOutputGainDB+20) << ", "
        << (s->second->disableVAD?"1":"0") << ", "
***** TEMPLATE48.CXX
        << (s->second->autoDial?"1":"0") << ", "
        << s->second->muteMask << ", "
        << (s->second->disableVAD?"1":"0") << ", "
*****

***** template.cxx
          else
          {
            PINDEX commaPosition = value.Find(',');
            if(commaPosition != P_MAX_INDEX)
            {
              PString name=value.Mid(commaPosition+1,P_MAX_INDEX).LeftTrim();
              PWaitAndSignal m(memberListMutex);
              ConferenceMember *member = FindMemberNameId(name);
              if(member && mixer!=NULL)
              {
                mixer->PositionSetup(vmpN, 1, member);
                member->SetFreezeVideo(FALSE);
              }
***** TEMPLATE48.CXX
          else
          { PINDEX commaPosition = value.Find(',');
            if(commaPosition != P_MAX_INDEX)
            { PString name=value.Mid(commaPosition+1,P_MAX_INDEX).LeftTrim();
              PWaitAndSignal m(memberListMutex);
              MemberNameList::iterator s;
              for(s = memberNameList.begin(); s != memberNameList.end(); ++s)
              {
                if(s->second!=NULL) // online
                {
                  if(MCUURL(name).GetUrlId() == MCUURL(s->first).GetUrlId())
                    break;
                }
              }
              if(s!=memberNameList.end())
              {
                if(s->second!=NULL) // online
                {
                  if(mixer!=NULL)
                  {
                    mixer->PositionSetup(vmpN, 1, s->second);
                    s->second->SetFreezeVideo(FALSE);
                  }
                }
              }
*****

***** template.cxx
          PWaitAndSignal m(memberListMutex);
          ConferenceMember *member = FindMemberNameId(memberInternalName);
          if(member)
          {
            PStringArray maskAndGain = v[1].Tokenise("/");
            BOOL hasGainOptions = (maskAndGain.GetSize() > 1);
            member->autoDial        = memberAutoDial;
            if(hasGainOptions)
            {
              member->muteMask      = maskAndGain[0].AsInteger();
              member->kManualGainDB = maskAndGain[1].AsInteger()-20;
              member->kOutputGainDB = maskAndGain[2].AsInteger()-20;
              member->kManualGain=(float)pow(10.0,((float)member->kManualGainDB)/20.0);
              member->kOutputGain=(float)pow(10.0,((float)member->kOutputGainDB)/20.0);
            }
            else // stay compatible with old-style templates:
            {
              member->muteMask      = v[1].AsInteger();
            }
            member->disableVAD      = (v[2]=="1");
            member->chosenVan       = (v[3]=="1");
            OpenMCU::Current().GetEndpoint().SetMemberVideoMixer(*this, member, v[4].AsInteger());
          }
          else
          {
            InsertMemberName(memberInternalName, NULL);
/*
            if(offline && memberAutoDial) // finally: offline and have to be called
            {
              PString token;
              PString numberWithMixer=number;
              if(v[4]!="0") numberWithMixer+="/"+v[4];
              if(OpenMCU::Current().GetEndpoint().Invite(numberWithMixer, memberAddress) != "")
              {
                PStringStream msg; msg << "Inviting " << memberAddress;
                OpenMCU::Current().HttpWriteEventRoom(msg,number);
              }
***** TEMPLATE48.CXX
          PWaitAndSignal m(memberListMutex);
          MemberNameList::const_iterator r;
          for(r = memberNameList.begin(); r != memberNameList.end(); ++r)
          {
            if(r->second!=NULL) // online
            {
              if(MCUURL(memberInternalName).GetUrlId() == MCUURL(r->first).GetUrlId())
              {
                memberInternalName = r->first;
                break;
              }
*****

***** template.cxx
            }
*/
          }
***** TEMPLATE48.CXX
            }
          }
          BOOL offline = (r == memberNameList.end());

          if(offline) memberNameList.insert(MemberNameList::value_type(memberInternalName, (ConferenceMember*)NULL));
          else offline = (r->second == NULL);

          if(offline && memberAutoDial) // finally: offline and have to be called
          {
            PString token;
            PString numberWithMixer=number;
            if(v[4]!="0") numberWithMixer+="/"+v[4];
            PString * userData = new PString(numberWithMixer);
//            if(OpenMCU::Current().GetEndpoint().MakeCall(memberAddress, token, userData) != NULL)
            if(InviteMember(memberAddress, userData))
            {
//              PStringStream msg; msg << "Inviting " << memberAddress;
//              OpenMCU::Current().HttpWriteEventRoom(msg,number);
            }
          }
          if(!offline) // online: just tune him up
          {
            r->second->autoDial     = memberAutoDial;
            r->second->muteMask     = v[1].AsInteger();
            r->second->disableVAD   = (v[2]=="1");
            r->second->chosenVan    = (v[3]=="1");
            OpenMCU::Current().GetEndpoint().SetMemberVideoMixer(*this, r->second, v[4].AsInteger());
          }
*****

***** template.cxx
      PString vmpMemberName=p.Mid(cp+1,P_MAX_INDEX).LeftTrim();
      if(MCUURL(vmpMemberName).GetMemberNameId() == MCUURL(memberName).GetMemberNameId())
      {
***** TEMPLATE48.CXX
      PString vmpMemberName=p.Mid(cp+1,P_MAX_INDEX).LeftTrim();
      if(MCUURL(vmpMemberName).GetUrlId() == MCUURL(memberName).GetUrlId())
      {
*****

***** template.cxx
      for (PINDEX j=6; j<v.GetSize(); j++) iterationMemberName+=","+v[j];
      if(MCUURL(iterationMemberName).GetMemberNameId() == MCUURL(memberName).GetMemberNameId())
      {
        PStringArray maskAndGain = v[1].Tokenise("/");
        BOOL hasGainOptions = (maskAndGain.GetSize() > 1);
        member->autoDial     = (v[0] == "1");
***** TEMPLATE48.CXX
      for (PINDEX j=6; j<v.GetSize(); j++) iterationMemberName+=","+v[j];
      if(MCUURL(iterationMemberName).GetUrlId() == MCUURL(memberName).GetUrlId())
      {
        member->autoDial     = (v[0] == "1");
*****

***** template.cxx
        member->muteMask     = v[1].AsInteger();
        if(hasGainOptions)
        {
          member->muteMask      = maskAndGain[0].AsInteger();
          member->kManualGainDB = maskAndGain[1].AsInteger()-20;
          member->kOutputGainDB = maskAndGain[2].AsInteger()-20;
          member->kManualGain=(float)pow(10.0,((float)member->kManualGainDB)/20.0);
          member->kOutputGain=(float)pow(10.0,((float)member->kOutputGainDB)/20.0);
        }
        else // stay compatible with old-style templates:
        {
          member->muteMask      = v[1].AsInteger();
        }
        member->disableVAD   = (v[2] == "1");
***** TEMPLATE48.CXX
        member->muteMask     = v[1].AsInteger();
        member->disableVAD   = (v[2] == "1");
*****

***** template.cxx
***** TEMPLATE48.CXX

void Conference::OnConnectionClean(const PString & remotePartyName, const PString & remotePartyAddress)
{
  PTRACE(4,"Conference\tOnConnectionClean: " << remotePartyName << " / " << remotePartyAddress);
  PString name;
  if(!remotePartyName.IsEmpty()) if(remotePartyName != remotePartyAddress) name += remotePartyName;
  if (name.Right(1)!="]")
  {
    PString url = remotePartyAddress;

    PINDEX i = url.Find("ip$");
    if(i != P_MAX_INDEX) url=url.Mid(i+3);

    if(url.Mid(1,6).Find(':') == P_MAX_INDEX) // no url prefix :(
    {
      if(url.Find('@') == P_MAX_INDEX) url=PString("@")+url;
      { // will used defaut prefix "h323:", fix it
        url=PString("h323:") + url;
        if(url.Right(5)==":1720") url=url.Left(url.GetLength()-5);
      }
    }

    if(!name.IsEmpty()) name+=' ';
    name += '[' + url +']';
  }

  PWaitAndSignal m(memberListMutex);
  Conference::MemberNameList::iterator q = memberNameList.find(name);
  if(q == memberNameList.end())
  {
    for(q=memberNameList.begin(); q!=memberNameList.end(); ++q)
    {
      if(q->first.FindLast(name) != P_MAX_INDEX)
      {
        name = q->first;
        break;
      }
    }
    if(q == memberNameList.end())
    {
      PTRACE(1,"Conference\tCould not match party name: " << remotePartyName << ", address: " << remotePartyAddress << ", resul
t: " << name);
      return;
    }
  }
  if(q->second != NULL)
  {
    PTRACE(2,"Conference\tMember found in the list, but it's not offine (nothing to do): " << remotePartyName << ", address: " 
<< remotePartyAddress << ", result: " << name);
    return;
  }

  if(confTpl.Trim().IsEmpty()) return;

  BOOL autoDial = FALSE;

  PStringArray lines=confTpl.Lines();
  PINDEX i;
  for(i=0;i<lines.GetSize();i++)
  {
    PString l = lines[i].Trim();
    PINDEX sp = l.Find(' ');
    if(sp==P_MAX_INDEX) continue;
    PString cmd = l.Left(sp);
    if(cmd=="MEMBER")
    {
      PStringArray v=l.Mid(sp+1,P_MAX_INDEX).LeftTrim().Tokenise(',');
      if(v.GetSize()>4) for(int i=0; i<=4;i++) v[i]=v[i].Trim();
      PString iterationMemberName = v[5].LeftTrim();
      for (PINDEX j=6; j<v.GetSize(); j++) iterationMemberName+=","+v[j];
      if(iterationMemberName == name)
      {
        autoDial = (v[0] == "1");
        break;
      }
    }
  }

  if(!autoDial) return;

  PTRACE(2,"Conference\tGetting back member " << name);
  InviteMember(name);
}






*****

